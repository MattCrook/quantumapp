Runinng QuantumApp
docker build -t application:latest .
docker run -it -d -p 8000:8000 application
sudo docker run -it -d --name quantumapp --env-file .env -p 80:8000 mgcrook11/quantum-app:1.2
IP of loadbalancer: 35.239.130.209:80
URI of vercel: https://quantum-application.vercel.app/
URI of app engine: https://quantum-coasters.uc.r.appspot.com/
QuantumApp: https://quantum-coasters.uc.r.appspot.com

services:
sqladmin.googleapis.com

AppEngine websockets:
https://github.com/GoogleCloudPlatform/python-docs-samples/tree/master/appengine/flexible/websockets


run docker container image for django channels
docker run -p 6379:6379 -d redis:5

then  installed redis
python3 -m pip install channels_redis
python3 -m pip install selenium

install chrome driver:
http://chromedriver.chromium.org/downloads
 if chromedriver not working:
 xattr -d com.apple.quarantine <name-of-executable>

migrations for quantumforum (because new app must include module to create migrations folder)
python manage.py makemigrations quantumforum
python manage.py migrate


# fixtures
# python manage.py dumpdata > /Users/matthewcrook/code/nss/frontEnd/quantumapp/quantumapi/fixtures/datadump.json

Generating OpenAPI Schemas
https://www.django-rest-framework.org/api-guide/schemas/

pip install pyyaml uritemplate

python manage.py generateschema --format openapi > openapi-schema.yml
python manage.py generateschema --format openapi > openapi-schema.json

usage: manage.py generateschema [-h] [--title TITLE] [--url URL] [--description DESCRIPTION]
                                [--format {openapi,openapi-json}] [--urlconf URLCONF] [--generator_class GENERATOR_CLASS]
                                [--version] [-v {0,1,2,3}] [--settings SETTINGS] [--pythonpath PYTHONPATH] [--traceback]
                                [--no-color] [--force-color] [--skip-checks]
manage.py generateschema: error: unrecognized arguments: --file openapi-schema.yml



docker build -t quantumapp:latest .
docker run -it -d -p 8000:8000 quantumapp
docker run -it -d --env-file .env -p 8000:8000 quantumapp

docker tag quantumapp:latest mgcrook11/quantum-coasters:1.0
docker push mgcrook11/quantum-coasters:1.0


sudo pip3 install virtualenv
or just
pip3 install virtualenv
virtualenv <env_name>
source env_name/bin/activate
pip3 install -r requirements.txt

python3 manage.py test

######################
Run DRF with App Engine
https://rogulski.it/blog/gae-standard-py37-django/

Dockerfile:
FROM google/cloud-sdk:latest
RUN mkdir /code
WORKDIR /code

RUN apt-get update -y && apt-get install build-essential checkinstall python3-pip redis-server -y
ADD requirements.txt /code/requirements.txt
RUN pip3 install -r requirements.txt
ADD . /code/


$ gcloud sql instances create [INSTANCE_NAME] --cpu=1 --memory=3840MiB --database-version=POSTGRES_9_6
$ gcloud sql databases create [DB_NAME] --instance=[INSTANCE_NAME]
Creating Cloud SQL database...done.

Created database [DB NAME].
instance: [INSTANCE NAME]
name: [DB_NAME]
project: [PROJECT ID]

$ gcloud sql users set-password [USER_NAME] --instance=[INSTANCE_NAME] --password=[PASSWORD]
$ ./cloud_sql_proxy -instances=<INSTANCE_CONNECTION_NAME>=tcp:3306

runtime: python37

handlers:
- url: /static
  static_dir: static/
- url: .*
  script: auto

env_variables:
  POSTGRESQL_CONNECTION_NAME: project:region:db
  POSTGRES_DB: [DB NAME]
  POSTGRES_PASSWORD: [DB PASSWORD]
  POSTGRES_USER: [DB USER]
  POSTGRES_HOST: [DB HOST]



AppEngine Instructions for cloud sql instance:
https://cloud.google.com/python/django/flexible-environment

Linux: wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
Mac: curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.darwin.amd64
chmod +x cloud_sql_proxy
mv cloud_sql_proxy /usr/local/bin

Connect to DB:
GOOGLE_CLOUD_PROJECT=quantum-coasters
USE_CLOUD_SQL_AUTH_PROXY=true
cloud_sql_proxy -instances="PROJECT_ID:REGION:INSTANCE_NAME"=tcp:5432

gcloud sql connect quantumcoastersdb --user postgres
or
gcloud sql connect quantumcoastersdb --user DB_USERNAME
